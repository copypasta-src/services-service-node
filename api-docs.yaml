openapi: 3.0.0
info:
  title: Sample API
  description: API documentation for our application
  version: "1.0"
paths:
  '/':
    get:
      tags:
      - Hello World
      summary: Base route returning hello world string
      requestBody:
        required: false
      responses:
        '200':
          description: OK
        '500':
          description: Server Error
  '/docs':
    get:
      tags:
      - Docs
      summary: Get Docs
      requestBody:
        required: false
      responses:
        '200':
          description: OK
        '500':
          description: Server Error
  '/init' :
    get:
      tags:
      - Master Controller
      summary: Basic hello message from the master controller route
      requestBody:
        required: false
      responses:
        '200':
          description: OK
        '500':
          description: Server Error
  '/init/create' :
    post:
      tags:
      - Master Controller
      summary: Creates a new project. This function will create a new project with the provided name and then initialize the project with the provided template.
      requestBody:
        required: true
        content:  
          application/json:
            example:
              configuration:
                meta:
                  name: Display Name Pretty
                  description: Description of project
                  projectName: name-of-git-repo-formatted
                framework:
                  framework: express
                git:
                  gitProvider: github
                  organizationName: name-of-git-organization
                  token: 12345678910euskauvkasfggirnvasdk
                cicd:
                  cicdProvider: githubActions
                  trigger:
                    pull_request:
                      types:
                        - closed
                      branches:
                        - main
                containerization:
                  containerizationProvider: docker
                  port: 8080
                deployment:
                  deploymentProvider: aws 
                  deploymentProviderConfiguration:
                    deploymentModule: AppRunner
                    deploymentContainerRepository: ECR
                    autoDeploy: true
                    aws_access_key_secret_name : AWS_OPERA_MICROSERVICE_USER_ACCESS_KEY # This is the repository secret variable name
                    aws_access_secret_key_secret_name : AWS_OPERA_MICROSERVICE_USER_SECRET_ACCESS_KEY # This is the repository secret variable name
                    aws_account_id_secret_name : AWS_ACCOUNT_ID # This is the repository secret variable name
                    aws_region : 'us-east-1' 
                    aws_ecr_apprunner_role_secret_name : AWS_ECR_APPRUNNER_ROLE               
      responses:
        '200':
          description: Successfully Created
          content:
            application/json:  # Media type of the response
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      repoName:
                        type: string
                        description: Name of the newly created project
                      newProjectPath:
                        type: string
                        description: Path to the newly created project
                      template:
                        type: string
                        description: The template that was used to create the project
                  status:
                    type: string
          
        '500':
          description: Failed to create project
  '/github':
    get:
      tags:
      - Github Logic
      summary: Returns a message indicating github
      requestBody:
        required: false
      responses:
        '200':
          description: OK
        '500':
          description: Server Error
  '/github/auth' : 
    get:
        tags:
        - Github Logic
        summary: Redirects the user to a github hosted authentication page. Upon successful authentication, the user is redirected back to a callback function ```github/auth/callback```.
        requestBody:
          required: false
        responses:
          '200':
            description: OK
          '500':
            description: Error launching redirect page
  '/github/auth/callback' :
    get:
      tags:
      - Github Logic
      summary: Callback function after successful github authentication. This function takes the auth code from the previous function and attempts to exchange it for a user specific access token. If successful, it will store it in the database.
      requestBody:
        required: false
      responses:
        '200':
          description: OK
        '500':
          description: Failed to exchange code for github authenticaion token.
  '/github/confirm-repo-name-available' : 
    get:
        tags:
        - Github Logic
        summary: Checks if the provided repository name is available on github.
        requestBody:
          required: false
        parameters:
          - name: repoName
            description: The name of the repository that you want to check
            in: query
            required: true
            schema:
                type: string
          - name: token
            description: The github token of the user
            in: body
            required: true
            schema:
                type: string
          - name: organization
            description: The organization that you want to check the repository name in
            in: body
            required: true
            schema:
                type: string
        responses:
          '200':
            description: Repository name is available
          '400' : 
            description: Repository name is not available
          '500':
            description: Error checking if repository name is available
  '/expressjs' :
    get:
      tags:
      - ExpressJS Logic
      summary: Returns a message indicating expressjs
      requestBody:
        required: false
      responses:
        '200':
          description: OK
        '500':
          description: Server Error
  '/expressjs/create' :
    get:
      tags:
      - ExpressJS Logic
      summary: Creates a new expressjs application. Should be used as a part of a larger function.
      requestBody:
        required: false
      parameters:
        - name: repoName
          description: The name of the project that you want to create
          in: query
          required: true
          schema:
              type: string
      responses:
        '200':
          description: Successfully Created
          content:
            application/json:  # Media type of the response
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      repoName:
                        type: string
                        description: Name of the newly created project
                      newProjectPath:
                        type: string
                        description: Path to the newly created project              
                  status:
                    type: string
          
        '500':
          description: Failed to create expressjs application
  '/cicd/github-actions' :
    post:
      tags:
      - CI/CD
      summary: Adds CI/CD workflow file to the project repository.
      requestBody:
        required: true
        content:  
          application/json:
            # schema:
            #     type: object
            #     properties:
            #       name:
            #         type: object
            #         description: The name of the project
            #         properties:
            #           name:
            #             type: string
            #             description: test 

            #       email:
            #         type: string
            example:
              configuration:
                meta:
                  projectName: name-of-git-repo
                git:
                  gitProvider: github
                  organizationName: name-of-git-organization
                  token: 12345678910euskauvkasfggirnvasdk
                cicd:
                  cicdProvider: githubActions
                  trigger:
                    pull_request:
                      types:
                        - closed
                      branches:
                        - main
                containerization:
                  containerizationProvider: docker
                deployment:
                  deploymentProvider: aws 
                  deploymentProviderConfiguration:
                    deploymentModule: AppRunner
                    deploymentContainerRepository: ECR
                    autoDeploy: true
                    aws_access_key_secret_name : AWS_OPERA_MICROSERVICE_USER_ACCESS_KEY # This is the repository secret variable name
                    aws_access_secret_key_secret_name : AWS_OPERA_MICROSERVICE_USER_SECRET_ACCESS_KEY # This is the repository secret variable name
                    aws_account_id_secret_name : AWS_ACCOUNT_ID # This is the repository secret variable name
                    aws_region : 'us-east-1' 
                    aws_ecr_apprunner_role_secret_name : AWS_ECR_APPRUNNER_ROLE               
                

      # parameters:
      #   - name: configuration
      #     description: JS Object containing the configuration information of the project.
      #     in: body
      #     required: true
      #     schema:
      #         type: object
      responses:
        '200':
          description: CI/CD workflow file added successfully
        '500':
          description: Failed to add CI/CD workflow file